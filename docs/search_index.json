[["index.html", "AlberdiLab | Chao et al. in prep New world vulture metagenomics Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Chao et al. in prep New world vulture metagenomics Jasper Chao Antton Alberdi1 2024-03-31 Chapter 1 Introduction This webbook contains all the code used for data analysis in study of gut microbiomes of newts across ponds included in a restoration plan. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/vulture_metagenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rairtable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["prepare-data.html", "Chapter 2 Prepare data 2.1 Load data 2.2 Create working objects 2.3 Prepare color scheme 2.4 Wrap working objects", " Chapter 2 Prepare data 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;data/DMB0117_metadata.tsv.gz&quot;) %&gt;% rename(sample=1) 2.1.2 Read counts read_counts &lt;- read_tsv(&quot;data/DMB0117_counts.tsv.gz&quot;) %&gt;% rename(genome=1) 2.1.3 Genome base hits genome_coverage &lt;- read_tsv(&quot;data/DMB0117_coverage.tsv.gz&quot;) %&gt;% rename(genome=1) 2.1.4 Genome taxonomy genome_metadata &lt;- read_tsv(&quot;data/DMB0117_mag_info.tsv.gz&quot;) %&gt;% rename(length=mag_size) 2.1.5 Genome tree genome_tree &lt;- read_tree(&quot;data/DMB0117.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.6 Genome annotations Downloading individual annotation files from ERDA using information in Airtable and writing them to a single compressed table takes a while. The following chunk only needs to be run once, to generate the genome_annotations table that is saved in the data directory. Note that the airtable connection requires a personal access token. airtable(&quot;MAGs&quot;, &quot;appWbHBNLE6iAsMRV&quot;) %&gt;% #get base ID from Airtable browser URL read_airtable(., fields = c(&quot;ID&quot;,&quot;mag_name&quot;,&quot;number_genes&quot;,&quot;anno_url&quot;), id_to_col = TRUE) %&gt;% #get 3 columns from MAGs table filter(mag_name %in% paste0(genome_metadata$genome,&quot;.fa&quot;)) %&gt;% #filter by MAG name filter(number_genes &gt; 0) %&gt;% #genes need to exist select(anno_url) %&gt;% #list MAG annotation urls pull() %&gt;% read_tsv() %&gt;% #load all tables rename(gene=1, genome=2, contig=3) %&gt;% #rename first 3 columns write_tsv(file=&quot;data/genome_annotations.tsv.xz&quot;) #write to overall compressed file genome_annotations &lt;- read_tsv(&quot;data/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.3 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) 2.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.4 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, #genome_gifts, phylum_colors, file = &quot;data/data.Rdata&quot;) "],["data-statistics.html", "Chapter 3 Data statistics 3.1 Sequencing reads statistics 3.2 DNA fractions 3.3 Recovered microbial fraction", " Chapter 3 Data statistics load(&quot;data/data.Rdata&quot;) 3.1 Sequencing reads statistics sample_metadata %&gt;% summarise(Total=sum(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), mean=mean(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), sd=sd(reads_post_fastp * 150 / 1000000000) %&gt;% round(2)) %&gt;% unite(&quot;Average&quot;,mean, sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_9wd16w91izy20lln936y .table td.tinytable_css_pyb7acnyogod6sei64cm, .table th.tinytable_css_pyb7acnyogod6sei64cm { border-bottom: solid 0.1em #d3d8dc; } Total Average 695.22 7.32 ± 4.23 3.2 DNA fractions sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases) sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% tt() tinytable_hugzex0acl6h4c7qwwn8 .table td.tinytable_css_3wq1x9muv4z3eh305cst, .table th.tinytable_css_3wq1x9muv4z3eh305cst { border-bottom: solid 0.1em #d3d8dc; } Sample Low quality Mapped to host Unmapped Mapped to MAGs EHI01087 0.6695527 3.30228337 0.6957268 0.20593928 EHI01089 0.5971062 2.29809861 1.1973431 1.84936214 EHI01090 1.4964600 3.89164336 1.3021172 3.82801736 EHI01095 0.7389361 0.62896575 6.2164847 0.21759402 EHI01097 0.7418323 3.27777441 0.0000000 0.04751351 EHI01098 0.5212489 0.03728883 2.4836960 0.13056692 EHI01101 1.5817235 4.10712018 2.2793399 0.17292897 EHI01104 1.5719678 4.61746206 1.3723392 0.16044130 EHI01105 0.8644910 4.22993999 0.8162903 0.50547259 EHI01106 0.5427014 3.38227175 0.5618769 0.41503931 EHI01107 0.5335754 3.40275577 0.0000000 0.04804378 EHI01109 0.5278718 3.12579584 0.0000000 0.13027288 EHI01110 0.9038713 4.43491993 0.9117838 0.35202746 EHI01116 0.8842878 3.04219745 0.6159657 0.66298980 EHI01117 0.1999736 2.78000317 0.0000000 0.07682024 EHI01119 0.7539106 3.39389566 0.0000000 0.03098616 EHI01120 0.9881967 4.06972766 0.0000000 0.03145833 EHI01121 0.7124950 2.06120663 0.0000000 0.01973818 EHI01125 1.0700539 3.82587471 0.0000000 0.06227411 EHI01126 1.1757436 2.77684922 0.6792913 0.71885772 EHI01127 1.0904899 4.18023815 1.2676185 0.17519445 EHI01128 1.5554433 6.08276727 1.2970400 0.05411563 EHI01139 0.6949708 2.48591198 0.4907853 0.49675098 EHI01140 0.2040228 0.04138970 3.4209687 0.09867673 EHI01143 0.5606637 1.43370297 0.5489274 1.92101792 EHI01146 0.8148967 0.47826781 2.9751350 0.11397213 EHI01147 0.4981868 2.93518753 0.0000000 0.06260611 EHI01152 0.8195927 4.32232310 0.9434188 0.31894780 EHI01182 0.1243809 2.24473404 0.5261952 0.50429889 EHI01184 0.1589348 1.40999961 0.5088391 0.75227405 EHI01185 0.1250044 1.43317517 0.5480802 0.58482300 EHI01186 0.1589065 2.99185852 0.0000000 0.03626757 EHI01187 0.1349840 2.63197664 0.0000000 0.01337827 EHI01188 0.1419303 2.90636580 0.0000000 0.03179121 EHI01189 0.1100434 0.05916081 3.3216064 0.07905141 EHI01192 0.2128998 1.81792336 1.0978595 0.02249451 EHI01193 0.1702529 3.29318888 0.0000000 0.02276753 EHI01195 0.1024397 0.60303798 1.6713858 0.53101791 EHI01196 0.1378872 1.73253564 0.4890348 0.31340287 EHI01219 0.2474621 4.19371751 0.0000000 0.06165127 EHI01220 0.1814526 3.39104042 0.0000000 0.01324760 EHI01221 0.2745498 3.77407857 0.0000000 0.01578114 EHI01223 0.1418051 0.47832378 1.0662283 0.65405474 EHI01224 0.1385980 2.20367548 0.6199791 0.17098644 EHI01233 0.2434360 1.75735032 0.6612552 0.94703075 EHI01634 2.5523130 11.55227357 2.4751009 0.73594892 EHI01635 0.8623835 0.14779997 12.2568851 0.35557351 EHI01636 1.4007795 5.22346113 0.0000000 0.04366714 EHI01637 2.3073477 9.82065870 2.4170127 0.53837704 EHI01638 3.6522065 9.89351464 3.0457033 0.36004710 EHI01639 1.4419412 4.39506794 1.4128728 0.08734581 EHI01640 1.5525797 3.58260977 1.1837202 3.57782782 EHI01641 1.8184598 6.00289517 1.1916042 1.22369418 EHI01642 2.0553635 9.10937416 1.5977245 0.24488682 EHI01643 1.7970890 3.66560937 0.9248028 0.04797166 EHI01644 1.3410079 7.47979230 1.2521465 0.93797788 EHI01645 2.1784913 6.89845361 1.4015490 1.53186777 EHI01646 1.6811088 6.03852750 1.8308237 0.25643805 EHI01647 1.3494908 4.63130409 2.4088440 3.78419605 EHI01648 1.5150460 7.15341473 1.6004285 0.54419354 EHI01649 2.0450389 1.07543576 6.6674915 0.25945835 EHI01650 1.4194483 0.09050066 6.0447541 0.32287331 EHI01651 1.3454259 3.08500982 1.1741095 4.21210964 EHI01652 2.6842132 9.59602253 2.1009544 0.09206088 EHI01653 2.2916182 4.80246361 1.1851766 1.25063702 EHI01654 1.0943443 10.41143649 2.1505113 0.36602025 EHI01655 1.6111932 1.17984052 11.6143980 0.41744043 EHI01656 1.8725629 6.37777958 1.3681174 0.07809993 EHI01657 1.1052799 5.09895183 1.2043485 0.09463968 EHI01658 3.2137282 7.72093620 4.3113679 0.33956476 EHI01659 2.0765416 9.18426851 1.9212322 0.74857675 EHI01660 1.8125910 4.76738632 0.8315338 0.10031850 EHI01661 2.4821854 11.12555627 2.1247322 1.28737486 EHI01787 0.5643141 9.53716654 1.2746695 0.05575579 EHI01788 0.2538515 4.80202263 0.8725932 0.25281842 EHI01789 0.3283081 7.48009576 1.1659081 0.05425827 EHI01790 0.2871278 4.61405494 0.8506278 0.02170173 EHI01791 0.3534815 7.10434327 1.2290473 0.26873446 EHI01792 0.2346984 3.34290251 0.5777317 0.66278978 EHI01793 0.3511796 5.72729894 1.0781123 0.03127393 EHI01794 0.1452987 3.25893510 0.0000000 0.01176103 EHI01795 0.2490204 3.66019998 0.9229186 0.50654496 EHI01796 0.3108897 0.83028875 2.0772084 4.70108481 EHI01797 0.2016543 5.20510228 0.0000000 0.02059651 EHI01798 0.6250897 10.51469275 1.9856256 0.29698137 EHI01799 0.3877622 7.35379285 1.1085491 0.29731338 EHI01800 0.3650573 4.78426949 1.2923866 0.87831600 EHI01801 0.4752275 7.77474495 1.0255181 0.19001550 EHI01802 0.2305928 5.26382214 1.0324286 0.13196400 EHI01820 0.4205506 5.23690074 1.3934516 0.27801247 EHI01821 0.7978723 15.07314540 3.6386058 0.37288765 EHI01822 0.7643386 9.42668221 4.8100712 8.50220065 EHI01823 0.8624810 8.03574332 2.5911019 3.04705197 EHI01824 0.3794501 7.67185540 1.0119067 0.04082875 EHI01828 0.7616001 3.83102911 4.3959266 2.18343102 sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) 3.3 Recovered microbial fraction singlem_table &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(singlem_proportion = round(singlem_fraction*100,2)) %&gt;% select(sample,mags_proportion,singlem_proportion) %&gt;% mutate(mags_proportion = ifelse(singlem_proportion == 0, 0, mags_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion == 0, NA, singlem_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion &lt; mags_proportion, NA, singlem_proportion)) %&gt;% #if singlem is smaller, then NA, to simplify plot mutate(singlem_proportion = ifelse(singlem_proportion &gt; 100, 100, singlem_proportion)) #simplify singlem_table %&gt;% pivot_longer(!sample, names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(proportion = factor(proportion, levels = c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;))) %&gt;% ggplot(., aes(x = value, y = sample, color=proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(name=&quot;Proportion&quot;, breaks=c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;), labels=c(&quot;Recovered&quot;,&quot;Estimated&quot;), values=c(&quot;#52e1e8&quot;, &quot;#876b53&quot;))+ facet_nested(species + sample_type ~ ., scales=&quot;free&quot;,space=&quot;free&quot;)+ theme_classic() + labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction (%)&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6), legend.position = &quot;right&quot;, strip.background.y=element_rect(color = NA, fill= &quot;#f4f4f4&quot;)) "],["mag-catalogue.html", "Chapter 4 MAG catalogue 4.1 Genome phylogeny 4.2 Genome quality 4.3 Functional overview 4.4 Functional ordination", " Chapter 4 MAG catalogue load(&quot;data/data.Rdata&quot;) 4.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 4.2 Genome quality genome_metadata %&gt;% summarise(completeness_mean=mean(completeness) %&gt;% round(2) %&gt;% as.character(), completeness_sd=sd(completeness) %&gt;% round(2) %&gt;% as.character(), contamination_mean=mean(contamination) %&gt;% round(2), contamination_sd=sd(contamination) %&gt;% round(2)) %&gt;% unite(&quot;Completeness&quot;,completeness_mean, completeness_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% unite(&quot;Contamination&quot;,contamination_mean, contamination_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() tinytable_70slfez3mt603phctug4 .table td.tinytable_css_kt0sv06id3kio1h82ff6, .table th.tinytable_css_kt0sv06id3kio1h82ff6 { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 83.13 ± 16.04 2.11 ± 2.4 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 4.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 4.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["compositional-analysis.html", "Chapter 5 Compositional analysis 5.1 Taxonomy boxplot 5.2 Alpha diversity 5.3 Beta diversity", " Chapter 5 Compositional analysis load(&quot;data/data.Rdata&quot;) 5.0.1 Taxonomy barplot per individual genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(!is.na(count)) %&gt;% ggplot(aes(y=count,x=sample, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(x = &quot;Relative abundance&quot;, y =&quot;Samples&quot;) + facet_nested(. ~ species.y + sample_type , scales=&quot;free&quot;, space=&quot;free&quot;) + #facet per day and treatment scale_y_continuous(expand = c(0.001, 0.001)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.position = &quot;none&quot;, strip.background.x=element_rect(color = NA, fill= &quot;#f4f4f4&quot;)) 5.1 Taxonomy boxplot 5.1.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_jlgda8mtqi1yletmkdju .table td.tinytable_css_3urdcr89cbs2frldkcvb, .table th.tinytable_css_3urdcr89cbs2frldkcvb { border-bottom: solid 0.1em #d3d8dc; } family mean sd Bacteroidaceae 1.349934e-01 0.2355762671 Peptostreptococcaceae 1.265954e-01 0.2003047797 Fusobacteriaceae 1.179239e-01 0.1458738058 Enterobacteriaceae 1.088605e-01 0.1905777531 Helicobacteraceae 9.413014e-02 0.1767378275 Clostridiaceae 6.945329e-02 0.1243229057 Campylobacteraceae 5.591634e-02 0.1131315105 Catellicoccaceae 5.305885e-02 0.1422465924 Mycoplasmoidaceae 4.050434e-02 0.1714127764 Lactobacillaceae 3.758704e-02 0.1600968373 Cellulosilyticaceae 3.556923e-02 0.0582955697 Porphyromonadaceae 2.197603e-02 0.0666469294 Peptoniphilaceae 2.060237e-02 0.0515934647 CAG-274 1.210850e-02 0.0395977824 Burkholderiaceae_A 9.686136e-03 0.0376160652 Chlamydiaceae 8.117520e-03 0.0382848789 Desulfovibrionaceae 5.580109e-03 0.0359452882 Selenomonadaceae 5.101894e-03 0.0359629704 Erysipelotrichaceae 5.006995e-03 0.0204090413 3.729786e-03 0.0335719378 Veillonellaceae 3.626526e-03 0.0106389862 Filifactoraceae 3.247374e-03 0.0115032184 Lachnospiraceae 2.942034e-03 0.0081314504 Anaerovoracaceae 2.483841e-03 0.0089452121 Tissierellaceae 2.444076e-03 0.0224003238 Ruminococcaceae 2.382604e-03 0.0064807153 Planococcaceae 2.135437e-03 0.0186267365 Peptococcaceae 2.056186e-03 0.0072240288 Tepidimicrobiaceae 1.618136e-03 0.0146032741 Mucispirillaceae 1.598802e-03 0.0047897732 Streptococcaceae 1.415677e-03 0.0052594300 UBA932 1.394879e-03 0.0052242104 Acidaminococcaceae 9.736027e-04 0.0034979478 Mycobacteriaceae 7.391909e-04 0.0049450852 Tissierellaceae_A 6.640589e-04 0.0060862001 Vagococcaceae 6.388941e-04 0.0035752333 Butyricicoccaceae 5.795755e-04 0.0021993548 CAG-508 4.136741e-04 0.0018999987 Coprobacillaceae 3.539934e-04 0.0020253897 Moraxellaceae 3.475403e-04 0.0021694914 Atopobiaceae 3.008484e-04 0.0017712414 Anaerotignaceae 2.804028e-04 0.0011764975 Tannerellaceae 2.467874e-04 0.0010948157 Oscillospiraceae 2.313110e-04 0.0011111966 UBA3375 1.792426e-04 0.0007368232 Turicibacteraceae 1.342658e-04 0.0007561806 Wohlfahrtiimonadaceae 6.919587e-05 0.0006341906 family_arrange &lt;- family_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% pull() family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + #geom_boxplot(alpha=0.2) + geom_jitter(alpha=0.5) + facet_nested(. ~ species + sample_type)+ theme_minimal() + theme(legend.position = &quot;none&quot;) 5.1.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) genus_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_s1of2hrpcbds026t3hky .table td.tinytable_css_teoue7c4r878jmvdkbuv, .table th.tinytable_css_teoue7c4r878jmvdkbuv { border-bottom: solid 0.1em #d3d8dc; } genus mean sd g__Fusobacterium_A 1.179239e-01 0.1458738058 g__Escherichia 1.045296e-01 0.1860683657 g__GCA-900066495 8.862392e-02 0.1958817247 g__Campylobacter_D 5.591634e-02 0.1131315105 g__Catellicoccus 5.305885e-02 0.1422465924 g__Prevotella 5.084046e-02 0.1755423947 g__Helicobacter_G 5.055896e-02 0.1218576010 g__Zhenhengia 3.556923e-02 0.0582955697 g__Helicobacter_D 3.215986e-02 0.1029459307 g__Peptostreptococcus 3.118737e-02 0.0694638235 g__Sarcina 2.609951e-02 0.0559480274 g__Ureaplasma 2.448075e-02 0.1206061525 g__Alloprevotella 2.361889e-02 0.0611609038 g__Ligilactobacillus 2.249411e-02 0.1154584801 g__Porphyromonas 2.197603e-02 0.0666469294 g__Anaerosphaera 1.983949e-02 0.0514068407 g__Clostridium 1.655643e-02 0.0310109524 g__Phocaeicola 1.526923e-02 0.0865751567 g__Clostridium_H 1.258596e-02 0.0430584409 g__Tyzzerella 1.210850e-02 0.0395977824 g__Mycoplasma_L 1.195384e-02 0.0932743545 g__F6-6636 1.192650e-02 0.0705082437 g__Bacteroides 1.100378e-02 0.0516588292 g__Sutterella 9.371858e-03 0.0374702630 g__Bacteroides_E 9.083135e-03 0.0665959028 g__Clostridium_G 8.315260e-03 0.0757795952 g__Chlamydiifrater 8.117520e-03 0.0382848789 g__Mailhella 5.580109e-03 0.0359452882 g__Bulleidia 4.803233e-03 0.0204153655 g__RGIG1987 4.069749e-03 0.0304552880 g__Plesiomonas 3.884902e-03 0.0175479313 g__Hathewaya 2.601320e-03 0.0104447961 g__Clostridium_J 2.442256e-03 0.0048099737 g__Savagea 2.135437e-03 0.0186267365 g__Lactobacillus 2.090952e-03 0.0113853596 g__Cryptobacteroides 1.394879e-03 0.0052242104 g__Lactococcus 1.311435e-03 0.0052564538 g__Limosilactobacillus 1.075479e-03 0.0080564212 g__Anaerotruncus 9.660959e-04 0.0025849276 g__UBA9414 9.201366e-04 0.0044801473 g__Paraclostridium 7.946527e-04 0.0054791406 g__Gemmiger 7.589084e-04 0.0046336342 g__Mycobacterium 7.391909e-04 0.0049450852 g__Terrisporobacter 7.354962e-04 0.0030472950 g__Enterocloster 6.914772e-04 0.0044543676 g__Vagococcus_C 5.830821e-04 0.0035663571 g__Butyricicoccus 5.795755e-04 0.0021993548 g__Edwardsiella 4.459381e-04 0.0028735031 g__Clostridium_X 4.187222e-04 0.0012889576 g__CAG-793 4.136741e-04 0.0018999987 g__Ruthenibacterium 3.689964e-04 0.0023769823 g__Thomasclavelia 3.539934e-04 0.0020253897 g__Parasutterella 3.142773e-04 0.0016953939 g__Anaerotignum 2.804028e-04 0.0011764975 g__UBA1367 2.741167e-04 0.0017661111 g__Clostridium_AP 2.494888e-04 0.0016072985 g__Parabacteroides 2.467874e-04 0.0010948157 g__Anaerofilum 2.460626e-04 0.0007805127 g__Blautia 2.235156e-04 0.0014398071 g__Dwaynesavagella 2.175211e-04 0.0013155954 g__Clostridium_F 2.163132e-04 0.0014772755 g__Faecalicoccus 2.037620e-04 0.0013125687 g__UBA3375 1.792426e-04 0.0007368232 g__Turicibacter 1.342658e-04 0.0007561806 g__Flavonifractor 1.240599e-04 0.0007991467 g__Sellimonas 1.191311e-04 0.0005809912 g__Streptococcus 1.042418e-04 0.0005289080 g__Lawsonibacter 7.202973e-05 0.0003356782 g__Vagococcus 5.581201e-05 0.0003595280 g__RGIG3102 4.254089e-05 0.0002548549 g__Pseudoflavonifractor_A 3.522144e-05 0.0001849164 g__RGIG4373 2.673169e-05 0.0001816031 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() genus_summary %&gt;% left_join(genome_metadata %&gt;% select(genus,phylum) %&gt;% unique(),by=join_by(genus==genus)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + #geom_boxplot() + geom_jitter(alpha=0.5) + facet_nested(. ~ species + sample_type)+ theme_minimal() 5.2 Alpha diversity # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% filter(genome %in% labels(dist)[[1]]) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% unite(&quot;group&quot;, c(species,sample_type), remove = FALSE) %&gt;% ggplot(aes(y = value, x = group, group=group, color=group, fill=group)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Group&quot;, breaks=c(&quot;Cathartes aura_Colon contents&quot;,&quot;Coragyps atratus_Colon contents&quot;,&quot;Cathartes aura_Stomach contents&quot;,&quot;Coragyps atratus_Stomach contents&quot;), labels=c(&quot;Cathartes aura (colon)&quot;,&quot;Coragyps atratus (colon)&quot;,&quot;Cathartes aura (stomach)&quot;,&quot;Coragyps atratus (stomach)&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;,&quot;#e2815a&quot;, &quot;#876b96&quot;)) + scale_fill_manual(name=&quot;Group&quot;, breaks=c(&quot;Cathartes aura_Colon contents&quot;,&quot;Coragyps atratus_Colon contents&quot;,&quot;Cathartes aura_Stomach contents&quot;,&quot;Coragyps atratus_Stomach contents&quot;), labels=c(&quot;Cathartes aura (colon)&quot;,&quot;Coragyps atratus (colon)&quot;,&quot;Cathartes aura (stomach)&quot;,&quot;Coragyps atratus (stomach)&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;,&quot;#e2815a50&quot;, &quot;#876b9650&quot;)) + facet_wrap(. ~ metric, scales = &quot;free&quot;, ncol=4) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank()) 5.3 Beta diversity beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, tree = genome_tree) beta_q1f &lt;- genome_counts_filt %&gt;% filter(genome %in% labels(dist)[[1]]) %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, dist = dist) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
